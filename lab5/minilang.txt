starting_nonterminal: Program;
productions:
    One_More_Statement: Statement, ;
    One_More_Statement: Statement, One_More_Statement, ;
    Program:   One_More_Statement, ;
    Statement: Variable_Declaration, ;
    Statement: Block, ;
    Statement: For, ;
    Statement: Read, ;
    Statement: Print, ;
    Statement: Expression_Statement, ;
    Let: "l", "e", "t", ;
    Variable_Declaration: Let, Identifier, Aux1, ";", ;
    Aux1: Type, ;
    Aux1: Type, "=", Expression, ;
    Aux1: "=", Expression, ;
    Type: "i", "3", "2", ;
    Type: "b", "o", "o", "l", ;
    Type: Array_Type, ;
    Array_Type: "[", "]", Type, ;
    If: "i", "f", Expression, Block, ;
    Block: Brace_Block, Do_Block, ;
    Do_Block: "d", "o", Statement, ;
    Brace_Block: "{", "}", ;
    Brace_Block: "{", One_More_Statement, "}", ;
    For: Normal_For, ;
    For: For_In, ;
    For_In: "f", "o", "r", Identifier, "i", "n", Identifier, Block, ;
    Normal_For: "f", "o", "r", Expression, Block, ;
    Print: "p", "r", "i", "n", "t", "(", Expression, ")", ";", ;
    Read: "r", "e", "a", "d", "(", Expression, ")", ";", ;
    Expression_Statement: Expression, ";", ;
    Expression: Prefix_Expression,
                Variable_Expression,
                Constant_Expression,
                Infix_Expression,
                Group_Expression,
                Array_Expression,
                ;
    Prefix_Expression: Prefix_Operator, Expression, ;
    Variable_Expression: Identifier, ;
    Constant_Expression: Integer_Constant, Bool_Constant, ;
    Infix_Expression: Expression, Infix_Operator, Experession, ;
    Group_Expression: "(", Expression, ")", ;
    Array_Expression: Array_Type, "{", "}", ;
    Array_Expression: Array_Type, "{", Expression_List, "}", ;
    Expression_List: Expression, ;
    Expression_List: Expression, ",", Expression_List, ;
;
